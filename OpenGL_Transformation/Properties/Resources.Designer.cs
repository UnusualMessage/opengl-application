//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransformationApplication.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TransformationApplication.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330
        ///
        ///out vec4 FragColor;
        ///
        ///uniform vec4 inputColor;
        ///
        ///void main()
        ///{
        ///    FragColor = inputColor;
        ///}.
        /// </summary>
        public static string FragmentShader {
            get {
                return ResourceManager.GetString("FragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///out vec4 FragColor;
        ///
        /////In order to calculate some basic lighting we need a few things per model basis, and a few things per fragment basis:
        ///uniform vec3 objectColor; //The color of the object.
        ///uniform vec3 lightColor; //The color of the light.
        ///uniform vec3 lightPos; //The position of the light.
        ///uniform vec3 viewPos; //The position of the view and/or of the player.
        ///
        ///in vec3 Normal; //The normal of the fragment is calculated in the vertex shader.
        ///in vec3 FragPos; //The fragment pos [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LightingShader {
            get {
                return ResourceManager.GetString("LightingShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///layout (location = 0) in vec3 aPos;
        ///layout (location = 1) in vec3 aNormal;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///
        ///out vec3 Normal;
        ///out vec3 FragPos;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(aPos, 1.0) * model * view * projection;
        ///    FragPos = vec3(vec4(aPos, 1.0) * model);
        ///    Normal = aNormal * mat3(transpose(inverse(model)));
        ///}.
        /// </summary>
        public static string VertexShader {
            get {
                return ResourceManager.GetString("VertexShader", resourceCulture);
            }
        }
    }
}
